
//  The properties of the Class are declared here
Declare private list of Strings moves // a list containing all the moves of the game. Each index represents
                                      // one "ply" or "tempo"

Declare private Integer currentPly = 0 // This variable keeps track of the current move in the game. An odd value
                                       // here means that White has moved and it is Black's turn

Declare canvas object canvas // This is the variable that contains the ID of the canvas object used to display the board

// The following are the essential information from the tags in the pgn file. All Strings are initialized as
// "-" in case the pgn file has incorrectly left out a tag
Declare private String eventName = "-" // one of the essential tags containing information about the game
Declare private String siteName = "-" // --  physical location at which the game took place
Declare private String dateName = "-" // --  date of event
Declare private String roundName = "-" // -- round within the event
Declare private String whiteName = "-" // -- name of the player of the white pieces. Format: Lastname, Firstname
Declare private String blackName = "-" // -- name of the player of the black pieces. Format: Lastname, Firstname
Declare private String resultName = "-" // -- result of the game. can be 0-0, 1-0, 0-1, or *

// In the future, a list of strings may be added to contain the contents of additional/optional tags


//  Upon the creation of a new game object, the program will read the pgn file and store all information
//  into the appropriate variables and objects. This also creates a board (including it's pieces)
//  One future possibility is to start an empty game for the user to play out and later save a new pgn file.
//  In that case, either the file name would be "new game" and a control structure would initialize the game
//  in a different way, or a separate constructor or init module could be called for a fresh game. 
constructor:
 -parameters: String fileName // the name of the pgn file
 -return: none
 call readFile(fileName)
 board = Board() // create the board object. The board object's constructor will create the pieces and initialize
                 // them in the proper starting position for a chess game. In the future, there may be the possibility
                 // of a different initial starting position
 board.applyMoves(moves) // this fills the board and pieces with the location information for the whole game
 board.display(canvas, currentPly)


//This method advances the currentPly variable forward in increments of 1 and then displays the new situation on the board
nextPly:
 -paramters: none
 -return: none
 currentPly++
 board.display(canvas, currentPly)


//This method reduces the currentPly variable forward in increments of 1 and then displays the new situation on the board
previousPly:
 -paramters: none
 -return: none
 currentPly--
 board.display(canvas, currentPly)


//  This is the method that actually reads a pgn file. First the method reads and stores the essential 
//  information from the tags at the beginning of the file. This essential information is stored into
//  specfic variables. 
//  As soon as the program has finished reading tags (the program has just read a ']' character) and 
//  encounters a '1' character at the beginning of the next line, the program begins to read the actual moves. These
//  moves are stored into a list of Strings called 'moves'
private readFile
 -parameters: String fileName
 -return: none
 // The first step is to save the general information about the game into the appropriate variables.
 // In the future, additional/optional tags will likely be stored into a List of Strings for that specific
 // purpose.
 declare local String currentLine = read line (fileName)
 while 1st char of currentLine == '['
     
     // this control structure assigns the information in the tag to the appropriate class property
     case:
         currentLine contains "Event": eventName = get text between quotes in currentLine
         currentLine contains "Site": siteName = get text between quotes in currentLine
         currentLine contains "Date": dateName = get text between quotes in currentLine
         currentLine contains "Round": roundName = get text between quotes in currentLine
         currentLine contains "White": whiteName = get text between quotes in currentLine
         currentLine contains "Black": blackName = get text between quotes in currentLine
         currentLine contains "Result": resultName = get text between quotes in currentLine
     end case
     
     currentLine = read line (fileName) // reassign currentLine to the next line in the pgn file
 end while
 
 // Now that the tags have been read, the program tests whether or not the last line of text contains the moves of
 // the game by checking if the line starts with '1'. If not, the pgn file is not correctly formatted, and the
 // program will give an error message
 if 1st char of the currentLine == '1'
     moves = getMoves(currentLine)
 else
     call errorMessage("format")


//  This method is called by the readFile method. The purpose of this is to take the essential information from the
//  line of moves in the pgn file and save it into a list that the program can easily access and utilize.
private getMoves
 -parameters: String lineOfMoves
 -return: String
 
 
